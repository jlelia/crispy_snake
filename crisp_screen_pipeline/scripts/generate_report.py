#!/usr/bin/env python3
"""
Generate HTML analysis summary report
"""

import pandas as pd
import argparse
import sys
from pathlib import Path
from datetime import datetime


HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>CRISPR Screen Analysis Report</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 40px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #34495e;
            margin-top: 30px;
        }}
        .summary-box {{
            background-color: #ecf0f1;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        th, td {{
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        th {{
            background-color: #3498db;
            color: white;
        }}
        tr:hover {{
            background-color: #f5f5f5;
        }}
        .stat {{
            display: inline-block;
            margin: 10px 20px;
        }}
        .stat-label {{
            font-weight: bold;
            color: #7f8c8d;
        }}
        .stat-value {{
            font-size: 24px;
            color: #2c3e50;
        }}
        .footer {{
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            text-align: center;
            color: #7f8c8d;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>CRISPR Screen Analysis Report</h1>
        <p><strong>Generated:</strong> {timestamp}</p>
        
        <h2>Data Summary</h2>
        <div class="summary-box">
            <div class="stat">
                <div class="stat-label">Total sgRNAs</div>
                <div class="stat-value">{total_sgrnas}</div>
            </div>
            <div class="stat">
                <div class="stat-label">Samples</div>
                <div class="stat-value">{num_samples}</div>
            </div>
            <div class="stat">
                <div class="stat-label">Total Reads</div>
                <div class="stat-value">{total_reads:,}</div>
            </div>
        </div>
        
        <h2>Sample Statistics</h2>
        {sample_table}
        
        <h2>Library Coverage</h2>
        <div class="summary-box">
            <p><strong>sgRNAs with reads:</strong> {sgrnas_with_reads} / {total_sgrnas} ({coverage_pct:.1f}%)</p>
            <p><strong>Mean reads per sgRNA:</strong> {mean_reads:.1f}</p>
            <p><strong>Median reads per sgRNA:</strong> {median_reads:.1f}</p>
        </div>
        
        <div class="footer">
            <p>CRISPR Screen Analysis Pipeline</p>
            <p>Generated by Snakemake workflow</p>
        </div>
    </div>
</body>
</html>
"""


def generate_report(count_file, output_file):
    """
    Generate HTML analysis report
    
    Args:
        count_file: Path to merged count table
        output_file: Path to output HTML file
    """
    
    # Read count table
    counts_df = pd.read_csv(count_file, sep="\t")
    
    # Get sample columns (exclude sgRNA_ID and gene)
    sample_cols = [col for col in counts_df.columns if col not in ['sgRNA_ID', 'gene']]
    
    # Calculate statistics
    total_sgrnas = len(counts_df)
    num_samples = len(sample_cols)
    
    # Sample statistics
    sample_stats = []
    for sample in sample_cols:
        total_reads = counts_df[sample].sum()
        sgrnas_detected = (counts_df[sample] > 0).sum()
        mean_reads = counts_df[sample].mean()
        median_reads = counts_df[sample].median()
        
        sample_stats.append({
            'Sample': sample,
            'Total Reads': f"{total_reads:,}",
            'sgRNAs Detected': sgrnas_detected,
            'Mean Reads/sgRNA': f"{mean_reads:.1f}",
            'Median Reads/sgRNA': f"{median_reads:.1f}"
        })
    
    sample_df = pd.DataFrame(sample_stats)
    sample_table = sample_df.to_html(index=False, classes='')
    
    # Overall statistics
    total_reads = counts_df[sample_cols].sum().sum()
    sgrnas_with_reads = (counts_df[sample_cols].sum(axis=1) > 0).sum()
    coverage_pct = 100 * sgrnas_with_reads / total_sgrnas
    
    mean_reads = counts_df[sample_cols].mean().mean()
    median_reads = counts_df[sample_cols].median().median()
    
    # Generate HTML
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    html_content = HTML_TEMPLATE.format(
        timestamp=timestamp,
        total_sgrnas=total_sgrnas,
        num_samples=num_samples,
        total_reads=int(total_reads),
        sample_table=sample_table,
        sgrnas_with_reads=sgrnas_with_reads,
        coverage_pct=coverage_pct,
        mean_reads=mean_reads,
        median_reads=median_reads
    )
    
    # Write HTML file
    with open(output_file, 'w') as f:
        f.write(html_content)
    
    print(f"Report generated: {output_file}")


def main():
    """Main function"""
    
    parser = argparse.ArgumentParser(
        description="Generate CRISPR screen analysis report"
    )
    parser.add_argument(
        "--counts", required=True,
        help="Merged count table"
    )
    parser.add_argument(
        "--output", required=True,
        help="Output HTML report"
    )
    
    args = parser.parse_args()
    
    generate_report(args.counts, args.output)


if __name__ == "__main__":
    main()
