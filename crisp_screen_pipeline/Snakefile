"""
Snakemake workflow for CRISPR screen analysis
Processes FASTQ files through QC, counting, and differential analysis
"""

import os
import re
from pathlib import Path

# Load configuration
configfile: "config.yaml"

# ============================================================================
# Validation: Enforce naming conventions (no spaces allowed)
# ============================================================================
# Only alphanumeric, dot, underscore, and dash are allowed: r'^[A-Za-z0-9._-]+$'
VALID_NAME_PATTERN = re.compile(r'^[A-Za-z0-9._-]+$')

def validate_name(name, field_description):
    """Validate that a name matches the allowed pattern."""
    if not VALID_NAME_PATTERN.match(name):
        raise ValueError(
            f"Invalid {field_description}: '{name}'. "
            f"Names must contain only letters, numbers, dots (.), underscores (_), and dashes (-). "
            f"Spaces and other special characters are not allowed."
        )

# Validate comparisons
if "comparisons" not in config:
    raise ValueError("Configuration must include 'comparisons' section.")

if not isinstance(config["comparisons"], list):
    raise ValueError("'comparisons' must be a list.")

for comparison in config["comparisons"]:
    # Check required fields
    if "name" not in comparison:
        raise ValueError(f"Comparison missing 'name' field: {comparison}")
    if "treatment" not in comparison:
        raise ValueError(f"Comparison '{comparison.get('name', 'unknown')}' missing 'treatment' field.")
    if "control" not in comparison:
        raise ValueError(f"Comparison '{comparison.get('name', 'unknown')}' missing 'control' field.")
    
    # Validate comparison name
    validate_name(comparison["name"], f"comparison name")
    
    # Validate treatment labels
    if not isinstance(comparison["treatment"], list):
        raise ValueError(f"Comparison '{comparison['name']}': 'treatment' must be a list.")
    for label in comparison["treatment"]:
        validate_name(label, f"treatment label in comparison '{comparison['name']}'")
    
    # Validate control labels
    if not isinstance(comparison["control"], list):
        raise ValueError(f"Comparison '{comparison['name']}': 'control' must be a list.")
    for label in comparison["control"]:
        validate_name(label, f"control label in comparison '{comparison['name']}'")

# Validate sample names (if samples exist)
if "samples" in config:
    if not isinstance(config["samples"], list):
        raise ValueError("'samples' must be a list.")
    
    for sample in config["samples"]:
        if "name" not in sample:
            raise ValueError(f"Sample missing 'name' field: {sample}")
        validate_name(sample["name"], "sample name")

# Extract sample names
SAMPLES = [s["name"] for s in config["samples"]]
COMPARISONS = [c["name"] for c in config.get("comparisons", [])]


# Helper function to get original FASTQ path
def get_fastq(sample):
    """Get the original FASTQ path for a sample"""
    return [s["fastq"] for s in config["samples"] if s["name"] == sample][0]


# Prefer merge_counts to produce merged_counts.txt if patterns ever overlap
ruleorder: merge_counts > count_sgrnas

# Target rule - defines all final outputs
rule all:
    input:
        # Quality control reports
        expand("results/qc/{sample}_trimmed_fastqc.html", sample=SAMPLES),
        # Count tables
        "results/counts/merged_counts.txt",
        # MAGeCK results
        expand("results/mageck/{comparison}.gene_summary.txt", comparison=COMPARISONS) if COMPARISONS else [],
        # DrugZ results
        expand("results/drugz/{comparison}_drugz.txt", comparison=COMPARISONS) if COMPARISONS else [],
        # Final report
        "results/reports/analysis_summary.html" if config.get("output", {}).get("generate_reports", True) else []


# Rule: Trim FASTQ reads to guide length (20bp)
rule trim_fastq:
    input:
        fastq=lambda wildcards: get_fastq(wildcards.sample)
    output:
        trimmed="results/trimmed/{sample}_trimmed.fastq.gz"
    conda:
        "envs/env_python.yaml"
    params:
        length=20
    log:
        "results/qc/logs/{sample}_trim.log"
    shell:
        """
        mkdir -p results/qc/logs
        python scripts/trim_fastq.py \
            --input {input.fastq} \
            --output {output.trimmed} \
            --length {params.length} \
            2>&1 | tee "{log}"
        """


# Rule: Quality control with FastQC
rule fastqc:
    input:
        fastq="results/trimmed/{sample}_trimmed.fastq.gz"
    output:
        html="results/qc/{sample}_trimmed_fastqc.html",
        zip="results/qc/{sample}_trimmed_fastqc.zip"
    conda:
        "envs/env_qc.yaml"
    threads: 2
    log:
        "results/qc/logs/{sample}_fastqc.log"
    shell:
        """
        mkdir -p results/qc/logs
        fastqc {input.fastq} -o results/qc/ -t {threads} 2>&1 | tee "{log}"
        """


# Rule: Extract and count sgRNA sequences
rule count_sgrnas:
    input:
        fastq="results/trimmed/{sample}_trimmed.fastq.gz",
        library=config["library"]["file"]
    output:
        counts="results/counts/samples/{sample}.counts.txt"
    conda:
        "envs/env_python.yaml"
    params:
        mismatches=config["params"]["counting"]["mismatches"]
    log:
        "results/counts/logs/{sample}_count.log"
    shell:
        """
        mkdir -p results/counts/logs results/counts/samples
        python scripts/count_sgrnas.py \
            --fastq {input.fastq} \
            --library {input.library} \
            --output {output.counts} \
            --mismatches {params.mismatches} \
            2>&1 | tee "{log}"
        """


# Rule: Merge count tables from all samples
rule merge_counts:
    input:
        counts=expand("results/counts/samples/{sample}.counts.txt", sample=SAMPLES)
    output:
        merged="results/counts/merged_counts.txt"
    conda:
        "envs/env_python.yaml"
    log:
        "results/counts/logs/merge_counts.log"
    script:
        "scripts/merge_counts.py"


# Rule: Run MAGeCK analysis
rule mageck_test:
    input:
        counts="results/counts/merged_counts.txt"
    output:
        gene_summary="results/mageck/{comparison}.gene_summary.txt",
        sgrna_summary="results/mageck/{comparison}.sgrna_summary.txt"
    conda:
        "envs/env_mageck.yaml"
    params:
        treatment=lambda wildcards: ",".join([c["treatment"] for c in config["comparisons"] if c["name"] == wildcards.comparison][0]),
        control=lambda wildcards: ",".join([c["control"] for c in config["comparisons"] if c["name"] == wildcards.comparison][0]),
        norm_method=config["params"]["mageck"]["norm_method"],
        fdr=config["params"]["mageck"]["fdr_threshold"]
    log:
        "results/mageck/logs/{comparison}_mageck.log"
    shell:
        """
        mkdir -p results/mageck results/mageck/logs
        mageck test \
            -k {input.counts} \
            -t {params.treatment} \
            -c {params.control} \
            -n results/mageck/{wildcards.comparison} \
            --norm-method {params.norm_method} \
            --gene-test-fdr-threshold {params.fdr} \
            2>&1 | tee "{log}"
        """


# Rule: Run DrugZ analysis
rule drugz_analysis:
    input:
        counts="results/counts/merged_counts.txt"
    output:
        results="results/drugz/{comparison}_drugz.txt"
    conda:
        "envs/env_python.yaml"
    params:
        treatment=lambda wildcards: [c["treatment"] for c in config["comparisons"] if c["name"] == wildcards.comparison][0],
        control=lambda wildcards: [c["control"] for c in config["comparisons"] if c["name"] == wildcards.comparison][0],
        pseudocount=config["params"]["drugz"]["pseudocount"],
        min_obs=config["params"]["drugz"]["min_observations"]
    log:
        "results/drugz/logs/{comparison}_drugz.log"
    script:
        "scripts/run_drugz.py"


# Rule: Generate analysis summary report
rule generate_report:
    input:
        counts="results/counts/merged_counts.txt",
        mageck=expand("results/mageck/{comparison}.gene_summary.txt", comparison=COMPARISONS) if COMPARISONS else [],
        drugz=expand("results/drugz/{comparison}_drugz.txt", comparison=COMPARISONS) if COMPARISONS else []
    output:
        report="results/reports/analysis_summary.html"
    conda:
        "envs/env_python.yaml"
    log:
        "results/reports/logs/generate_report.log"
    shell:
        """
        mkdir -p results/reports/logs
        python scripts/generate_report.py \
            --counts {input.counts} \
            --output {output.report} \
            2>&1 | tee "{log}"
        """
